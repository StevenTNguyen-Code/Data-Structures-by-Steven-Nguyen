#BlueJ class context
comment0.target=LinearListADT
comment1.params=obj
comment1.target=boolean\ addFirst(java.lang.Comparable)
comment1.text=\ Adds\ the\ Object\ obj\ to\ the\ beginning\ of\ list\ and\ returns\ true\ if\ the\ list\r\n\ is\ not\ full.\r\n\ returns\ false\ and\ aborts\ the\ insertion\ if\ the\ list\ is\ full.\r\n
comment10.params=
comment10.target=void\ clear()
comment10.text=\ The\ list\ is\ returned\ to\ an\ empty\ state.\r\n
comment11.params=
comment11.target=boolean\ isEmpty()
comment11.text=\ Returns\ true\ if\ the\ list\ is\ empty,\ otherwise\ false\r\n
comment12.params=
comment12.target=boolean\ isFull()
comment12.text=\ Returns\ true\ if\ the\ list\ is\ full,\ otherwise\ false\r\n
comment13.params=
comment13.target=int\ size()
comment13.text=\ Returns\ the\ number\ of\ Objects\ currently\ in\ the\ list.\r\n
comment14.params=
comment14.target=java.util.Iterator\ iterator()
comment14.text=\ Returns\ an\ Iterator\ of\ the\ values\ in\ the\ list,\ presented\ in\ the\ same\r\n\ order\ as\ the\ underlying\ order\ of\ the\ list.\ (front\ first,\ rear\ last)\r\n
comment2.params=obj
comment2.target=boolean\ addLast(java.lang.Comparable)
comment2.text=\ Adds\ the\ Object\ obj\ to\ the\ end\ of\ list\ and\ returns\ true\ if\ the\ list\ is\r\n\ not\ full.\r\n\ returns\ false\ and\ aborts\ the\ insertion\ if\ the\ list\ is\ full.\r\n
comment3.params=
comment3.target=java.lang.Comparable\ removeFirst()
comment3.text=\ Removes\ and\ returns\ the\ parameter\ object\ obj\ in\ first\ position\ in\ list\r\n\ if\ the\ list\ is\ not\ empty,\ null\ if\ the\ list\ is\ empty.\r\n
comment4.params=
comment4.target=java.lang.Comparable\ removeLast()
comment4.text=\ Removes\ and\ returns\ the\ parameter\ object\ obj\ in\ last\ position\ in\ list\ if\r\n\ the\ list\ is\ not\ empty,\ null\ if\ the\ list\ is\ empty.\r\n
comment5.params=obj
comment5.target=java.lang.Comparable\ remove(java.lang.Comparable)
comment5.text=\ Removes\ and\ returns\ the\ parameter\ object\ obj\ from\ the\ list\ if\ the\ list\r\n\ contains\ it,\ null\ otherwise.\ The\ ordering\ of\ the\ list\ is\ preserved.\ \r\n\ The\ list\ may\ contain\ duplicate\ elements.\ This\ method\ removes\ and\ returns\r\n\ the\ first\ matching\ element\ found\ when\ traversing\ the\ list\ from\ first\r\n\ position.\ Note\ that\ you\ may\ have\ to\ shift\ elements\ to\ fill\ in\ the\ slot\r\n\ where\ the\ deleted\ element\ was\ located.\r\n
comment6.params=
comment6.target=java.lang.Comparable\ peekFirst()
comment6.text=\ Returns\ the\ first\ element\ in\ the\ list,\ null\ if\ the\ list\ is\ empty.\r\n\ The\ list\ is\ not\ modified.\r\n
comment7.params=
comment7.target=java.lang.Comparable\ peekLast()
comment7.text=\ Returns\ the\ last\ element\ in\ the\ list,\ null\ if\ the\ list\ is\ empty.\r\n\ The\ list\ is\ not\ modified.\r\n
comment8.params=obj
comment8.target=boolean\ contains(java.lang.Comparable)
comment8.text=\ Returns\ true\ if\ the\ parameter\ object\ obj\ is\ in\ the\ list,\ false\ otherwise.\r\n\ The\ list\ is\ not\ modified.\r\n
comment9.params=obj
comment9.target=java.lang.Comparable\ find(java.lang.Comparable)
comment9.text=\ Returns\ the\ element\ matching\ obj\ if\ it\ is\ in\ the\ list,\ null\ otherwise.\r\n\ In\ the\ case\ of\ duplicates,\ this\ method\ returns\ the\ element\ closest\ to\r\n\ front.\ The\ list\ is\ not\ modified.\r\n
numComments=15
