#BlueJ class context
comment0.target=ArrayLinearList
comment1.params=maxCapacity
comment1.target=ArrayLinearList(int)
comment10.params=
comment10.target=java.lang.Comparable\ peekLast()
comment10.text=\ Returns\ the\ last\ element\ in\ the\ list,\ null\ if\ the\ list\ is\ empty.\r\n\ The\ list\ is\ not\ modified.\r\n
comment11.params=obj
comment11.target=boolean\ contains(java.lang.Comparable)
comment11.text=\ Returns\ true\ if\ the\ parameter\ object\ obj\ is\ in\ the\ list,\ false\ otherwise.\r\n\ The\ list\ is\ not\ modified.\r\n
comment12.params=obj
comment12.target=java.lang.Comparable\ find(java.lang.Comparable)
comment12.text=\ Returns\ the\ element\ matching\ obj\ if\ it\ is\ in\ the\ list,\ null\ otherwise.\r\n\ In\ the\ case\ of\ duplicates,\ this\ method\ returns\ the\ element\ closest\ to\ front.\r\n\ The\ list\ is\ not\ modified.\r\n
comment13.params=
comment13.target=void\ clear()
comment13.text=\ The\ list\ is\ returned\ to\ an\ empty\ state.\r\n
comment14.params=
comment14.target=boolean\ isEmpty()
comment14.text=\ Returns\ true\ if\ the\ list\ is\ empty,\ otherwise\ false\r\n
comment15.params=
comment15.target=boolean\ isFull()
comment15.text=\ Returns\ true\ if\ the\ list\ is\ full,\ otherwise\ false\r\n
comment16.params=
comment16.target=int\ size()
comment16.text=\ Returns\ the\ number\ of\ Objects\ currently\ in\ the\ list.\r\n
comment17.params=
comment17.target=java.util.Iterator\ iterator()
comment17.text=\ Returns\ an\ Iterator\ of\ the\ values\ in\ the\ list,\ presented\ in\r\n\ the\ same\ order\ as\ the\ underlying\ order\ of\ the\ list.\ (front\ first,\ rear\ last)\r\n
comment18.params=
comment18.target=void\ print()
comment2.params=
comment2.target=ArrayLinearList()
comment3.params=
comment3.target=void\ ends()
comment3.text=\ Outputs\ Front\:\ indexFront\ Rear\:\ indexRear\r\n
comment4.params=obj
comment4.target=boolean\ addFirst(java.lang.Comparable)
comment4.text=\ Adds\ the\ Object\ obj\ to\ the\ beginning\ of\ list\ and\ returns\ true\ if\ the\ list\ is\ not\r\n\ full.\r\n\ returns\ false\ and\ aborts\ the\ insertion\ if\ the\ list\ is\ full.\r\n
comment5.params=obj
comment5.target=boolean\ addLast(java.lang.Comparable)
comment5.text=\ Adds\ the\ Object\ obj\ to\ the\ end\ of\ list\ and\ returns\ true\ if\ the\ list\ is\ not\ full.\r\n\ returns\ false\ and\ aborts\ the\ insertion\ if\ the\ list\ is\ full.\r\n
comment6.params=
comment6.target=java.lang.Comparable\ removeFirst()
comment6.text=\ Removes\ and\ returns\ the\ parameter\ object\ obj\ in\ first\ position\ in\ list\ if\ the\ list\r\n\ is\ not\ empty,\ null\ if\ the\ list\ is\ empty.\r\n
comment7.params=
comment7.target=java.lang.Comparable\ removeLast()
comment7.text=\ Removes\ and\ returns\ the\ parameter\ object\ obj\ in\ last\ position\ in\ list\ if\ the\ list\r\n\ is\ not\ empty,\ null\ if\ the\ list\ is\ empty.\r\n
comment8.params=obj
comment8.target=java.lang.Comparable\ remove(java.lang.Comparable)
comment8.text=\ Removes\ and\ returns\ the\ parameter\ object\ obj\ from\ the\ list\ if\ the\ list\ contains\r\n\ it,\ null\ otherwise.\ The\ ordering\ of\ the\ list\ is\ preserved.\ The\ list\ may\ contain\r\n\ duplicate\ elements.\ This\ method\ removes\ and\ returns\ the\ first\ matching\ element\r\n\ found\ when\ traversing\ the\ list\ from\ first\ position.\r\n\ Note\ that\ you\ may\ have\ to\ shift\ elements\ to\ fill\ in\ the\ slot\ where\ the\ deleted\r\n\ element\ was\ located.\r\n
comment9.params=
comment9.target=java.lang.Comparable\ peekFirst()
comment9.text=\ Returns\ the\ first\ element\ in\ the\ list,\ null\ if\ the\ list\ is\ empty.\r\n\ The\ list\ is\ not\ modified.\r\n
numComments=19
